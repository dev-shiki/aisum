{"ast":null,"code":"import api from \"../api/axios\";\nimport UploadBox from \"../components/UploadBox.vue\";\nimport SummaryDisplay from \"../components/SummaryDisplay.vue\";\nimport LoadingSpinner from \"../components/LoadingSpinner.vue\";\nexport default {\n  components: {\n    UploadBox,\n    SummaryDisplay,\n    LoadingSpinner\n  },\n  data() {\n    return {\n      isLoading: false,\n      // Menampilkan animasi loading\n      isProcessing: false,\n      // Status pemrosesan backend\n      errorMessage: \"\",\n      // Pesan error\n      transcription: \"\",\n      summary: \"\",\n      finalSummary: \"\",\n      requestId: null,\n      // ID unik untuk tracking proses\n      retryCount: 0 // Hitungan retry polling status\n    };\n  },\n  methods: {\n    async handleFileUpload(file) {\n      this.isLoading = true;\n      this.isProcessing = true;\n      this.errorMessage = \"\";\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      try {\n        const response = await api.post(\"/summarize/\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        if (response.data.error) {\n          this.errorMessage = response.data.error;\n        } else {\n          this.requestId = response.data.request_id; // Simpan ID untuk tracking status\n          this.retryCount = 0;\n          this.pollBackendStatus(); // Mulai polling untuk memeriksa status\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 429) {\n          this.errorMessage = \"‚ö†Ô∏è Server sedang sibuk, mohon tunggu beberapa saat.\";\n        } else {\n          this.errorMessage = \"‚ùå Terjadi kesalahan saat mengunggah file.\";\n        }\n        console.error(\"Error uploading file:\", error);\n      }\n    },\n    async pollBackendStatus() {\n      // Periksa status setiap 5 detik hingga selesai (Maksimal 30 percobaan)\n      const interval = setInterval(async () => {\n        if (this.retryCount >= 30) {\n          // Maksimal 150 detik polling (2.5 menit)\n          this.isProcessing = false;\n          this.isLoading = false;\n          this.errorMessage = \"‚ö†Ô∏è Server terlalu lama merespons. Coba lagi nanti.\";\n          clearInterval(interval);\n          return;\n        }\n        try {\n          const statusResponse = await api.get(`/summarize/status/${this.requestId}`);\n          if (statusResponse.data.status === \"completed\") {\n            this.transcription = statusResponse.data.transcription;\n            this.summary = statusResponse.data.summary;\n            this.finalSummary = statusResponse.data.final_summary;\n            this.isProcessing = false;\n            this.isLoading = false;\n            clearInterval(interval); // Hentikan polling saat selesai\n          } else if (statusResponse.data.status === \"failed\") {\n            this.isProcessing = false;\n            this.isLoading = false;\n            this.errorMessage = \"‚ùå Terjadi kesalahan saat memproses.\";\n            clearInterval(interval);\n          }\n        } catch (error) {\n          console.error(\"Error checking processing status:\", error);\n        }\n        this.retryCount += 1;\n      }, 5000); // Polling setiap 5 detik\n    }\n  }\n};","map":{"version":3,"names":["api","UploadBox","SummaryDisplay","LoadingSpinner","components","data","isLoading","isProcessing","errorMessage","transcription","summary","finalSummary","requestId","retryCount","methods","handleFileUpload","file","formData","FormData","append","response","post","headers","error","request_id","pollBackendStatus","status","console","interval","setInterval","clearInterval","statusResponse","get","final_summary"],"sources":["D:\\app\\meeting-summarizer\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <h2>üìÑ Meeting Summarizer</h2>\r\n  \r\n      <!-- Upload File -->\r\n      <UploadBox @file-selected=\"handleFileUpload\" />\r\n  \r\n      <!-- Animasi Loading -->\r\n      <LoadingSpinner v-if=\"isLoading\" />\r\n  \r\n      <!-- Pesan Status -->\r\n      <p v-if=\"isProcessing\" class=\"processing-message\">‚è≥ Memproses... Mohon tunggu...</p>\r\n      <p v-if=\"errorMessage\" class=\"error-message\">‚ùå {{ errorMessage }}</p>\r\n  \r\n      <!-- Output Ringkasan -->\r\n      <SummaryDisplay\r\n        v-if=\"summary && !isProcessing\"\r\n        :transcription=\"transcription\"\r\n        :summary=\"summary\"\r\n        :finalSummary=\"finalSummary\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import api from \"../api/axios\";\r\n  import UploadBox from \"../components/UploadBox.vue\";\r\n  import SummaryDisplay from \"../components/SummaryDisplay.vue\";\r\n  import LoadingSpinner from \"../components/LoadingSpinner.vue\";\r\n  \r\n  export default {\r\n    components: {\r\n      UploadBox,\r\n      SummaryDisplay,\r\n      LoadingSpinner,\r\n    },\r\n    data() {\r\n      return {\r\n        isLoading: false,       // Menampilkan animasi loading\r\n        isProcessing: false,    // Status pemrosesan backend\r\n        errorMessage: \"\",       // Pesan error\r\n        transcription: \"\",\r\n        summary: \"\",\r\n        finalSummary: \"\",\r\n        requestId: null,        // ID unik untuk tracking proses\r\n        retryCount: 0,          // Hitungan retry polling status\r\n      };\r\n    },\r\n    methods: {\r\n      async handleFileUpload(file) {\r\n        this.isLoading = true;\r\n        this.isProcessing = true;\r\n        this.errorMessage = \"\";\r\n  \r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n  \r\n        try {\r\n          const response = await api.post(\"/summarize/\", formData, {\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          });\r\n  \r\n          if (response.data.error) {\r\n            this.errorMessage = response.data.error;\r\n          } else {\r\n            this.requestId = response.data.request_id; // Simpan ID untuk tracking status\r\n            this.retryCount = 0;\r\n            this.pollBackendStatus(); // Mulai polling untuk memeriksa status\r\n          }\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 429) {\r\n            this.errorMessage = \"‚ö†Ô∏è Server sedang sibuk, mohon tunggu beberapa saat.\";\r\n          } else {\r\n            this.errorMessage = \"‚ùå Terjadi kesalahan saat mengunggah file.\";\r\n          }\r\n          console.error(\"Error uploading file:\", error);\r\n        }\r\n      },\r\n  \r\n      async pollBackendStatus() {\r\n        // Periksa status setiap 5 detik hingga selesai (Maksimal 30 percobaan)\r\n        const interval = setInterval(async () => {\r\n          if (this.retryCount >= 30) { // Maksimal 150 detik polling (2.5 menit)\r\n            this.isProcessing = false;\r\n            this.isLoading = false;\r\n            this.errorMessage = \"‚ö†Ô∏è Server terlalu lama merespons. Coba lagi nanti.\";\r\n            clearInterval(interval);\r\n            return;\r\n          }\r\n  \r\n          try {\r\n            const statusResponse = await api.get(`/summarize/status/${this.requestId}`);\r\n            \r\n            if (statusResponse.data.status === \"completed\") {\r\n              this.transcription = statusResponse.data.transcription;\r\n              this.summary = statusResponse.data.summary;\r\n              this.finalSummary = statusResponse.data.final_summary;\r\n  \r\n              this.isProcessing = false;\r\n              this.isLoading = false;\r\n              clearInterval(interval); // Hentikan polling saat selesai\r\n            } else if (statusResponse.data.status === \"failed\") {\r\n              this.isProcessing = false;\r\n              this.isLoading = false;\r\n              this.errorMessage = \"‚ùå Terjadi kesalahan saat memproses.\";\r\n              clearInterval(interval);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error checking processing status:\", error);\r\n          }\r\n  \r\n          this.retryCount += 1;\r\n        }, 5000); // Polling setiap 5 detik\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .processing-message {\r\n    color: #ff9800;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .error-message {\r\n    color: red;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
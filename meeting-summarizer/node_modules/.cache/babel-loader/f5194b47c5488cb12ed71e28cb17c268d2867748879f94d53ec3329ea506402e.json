{"ast":null,"code":"import api from \"../api/axios\";\nimport UploadBox from \"../components/UploadBox.vue\";\nimport SummaryDisplay from \"../components/SummaryDisplay.vue\";\nimport LoadingSpinner from \"../components/LoadingSpinner.vue\";\nexport default {\n  components: {\n    UploadBox,\n    SummaryDisplay,\n    LoadingSpinner\n  },\n  data() {\n    return {\n      isProcessing: false,\n      isLongProcessing: false,\n      isDelayed: false,\n      processingMessage: \"Mengunggah file...\",\n      errorMessage: \"\",\n      transcription: \"\",\n      summary: \"\",\n      finalSummary: \"\",\n      requestId: null,\n      pollingInterval: null,\n      elapsedTime: 0,\n      maxWaitTime: 600,\n      // Maksimal waktu tunggu dalam detik (10 menit)\n      retryCount: 0\n    };\n  },\n  methods: {\n    async handleFileUpload(file) {\n      // Reset status sebelum upload baru\n      this.isProcessing = true;\n      this.isLongProcessing = false;\n      this.isDelayed = false;\n      this.errorMessage = \"\";\n      this.transcription = \"\";\n      this.summary = \"\";\n      this.finalSummary = \"\";\n      this.requestId = null;\n      this.elapsedTime = 0;\n      this.retryCount = 0;\n      this.processingMessage = \"Mengunggah file...\";\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      try {\n        const response = await api.post(\"/summarize/\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        if (response.data.error) {\n          this.errorMessage = response.data.error;\n          this.isProcessing = false;\n        } else {\n          this.requestId = response.data.task_id;\n          this.processingMessage = \"File diunggah! Menunggu pemrosesan...\";\n          this.pollBackendStatus();\n        }\n      } catch (error) {\n        this.errorMessage = \"⚠️ Server sedang sibuk. Mohon tunggu...\";\n        this.isProcessing = false;\n      }\n    },\n    async pollBackendStatus() {\n      if (!this.requestId) return;\n      this.pollingInterval = setInterval(async () => {\n        try {\n          const statusResponse = await api.get(`/summarize/status/${this.requestId}`);\n          if (statusResponse.data.status === \"completed\") {\n            this.transcription = statusResponse.data.transcription;\n            this.summary = statusResponse.data.summary;\n            this.finalSummary = statusResponse.data.final_summary;\n            this.isProcessing = false;\n            clearInterval(this.pollingInterval);\n          } else if (statusResponse.data.status === \"failed\") {\n            this.isProcessing = false;\n            this.errorMessage = \"❌ Terjadi kesalahan dalam pemrosesan.\";\n            clearInterval(this.pollingInterval);\n          } else {\n            // Jika API memberikan respons \"Too Many Requests (429)\", perpanjang waktu polling\n            if (statusResponse.status === 429) {\n              this.retryCount++;\n              this.isDelayed = true;\n              this.processingMessage = `⚠️ Server sibuk, percobaan ke-${this.retryCount}. Menunggu...`;\n            } else {\n              this.processingMessage = statusResponse.data.message || \"Memproses...\";\n            }\n            this.elapsedTime += 5;\n            if (this.elapsedTime >= 60) {\n              this.isLongProcessing = true;\n            }\n            if (this.elapsedTime >= this.maxWaitTime) {\n              this.isProcessing = false;\n              this.errorMessage = \"❌ Waktu tunggu habis. Coba unggah ulang file.\";\n              clearInterval(this.pollingInterval);\n            }\n          }\n        } catch (error) {\n          console.error(\"❌ Error checking status:\", error);\n        }\n      }, 5000);\n    },\n    cancelProcessing() {\n      if (this.pollingInterval) {\n        clearInterval(this.pollingInterval);\n        this.pollingInterval = null;\n      }\n      this.isProcessing = false;\n      this.errorMessage = \"⚠️ Pemrosesan dibatalkan.\";\n      this.requestId = null;\n    }\n  }\n};","map":{"version":3,"names":["api","UploadBox","SummaryDisplay","LoadingSpinner","components","data","isProcessing","isLongProcessing","isDelayed","processingMessage","errorMessage","transcription","summary","finalSummary","requestId","pollingInterval","elapsedTime","maxWaitTime","retryCount","methods","handleFileUpload","file","formData","FormData","append","response","post","headers","error","task_id","pollBackendStatus","setInterval","statusResponse","get","status","final_summary","clearInterval","message","console","cancelProcessing"],"sources":["D:\\app\\meeting-summarizer\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <!-- Upload File -->\r\n      <UploadBox @file-selected=\"handleFileUpload\" />\r\n\r\n      <!-- Animasi Loading & Pesan Status -->\r\n      <LoadingSpinner v-if=\"isProcessing\" />\r\n      <p v-if=\"isProcessing\" class=\"processing-message\">⏳ {{ processingMessage }}</p>\r\n      <p v-if=\"isLongProcessing\" class=\"warning-message\">⚠️ Masih dalam antrian... Mohon tunggu.</p>\r\n      <p v-if=\"isDelayed\" class=\"delayed-message\">⏳ Menunggu API Response... Backend masih memproses.</p>\r\n      <p v-if=\"errorMessage\" class=\"error-message\">❌ {{ errorMessage }}</p>\r\n\r\n      <!-- Tombol Batalkan -->\r\n      <button v-if=\"isProcessing\" @click=\"cancelProcessing\" class=\"cancel-button\">\r\n        ❌ Batalkan\r\n      </button>\r\n\r\n      <!-- Output Ringkasan -->\r\n      <SummaryDisplay\r\n        v-if=\"summary && !isProcessing\"\r\n        :transcription=\"transcription\"\r\n        :summary=\"summary\"\r\n        :finalSummary=\"finalSummary\"\r\n      />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api/axios\";\r\nimport UploadBox from \"../components/UploadBox.vue\";\r\nimport SummaryDisplay from \"../components/SummaryDisplay.vue\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    UploadBox,\r\n    SummaryDisplay,\r\n    LoadingSpinner,\r\n  },\r\n  data() {\r\n    return {\r\n      isProcessing: false,\r\n      isLongProcessing: false,\r\n      isDelayed: false,\r\n      processingMessage: \"Mengunggah file...\",\r\n      errorMessage: \"\",\r\n      transcription: \"\",\r\n      summary: \"\",\r\n      finalSummary: \"\",\r\n      requestId: null,\r\n      pollingInterval: null,\r\n      elapsedTime: 0,\r\n      maxWaitTime: 600, // Maksimal waktu tunggu dalam detik (10 menit)\r\n      retryCount: 0,\r\n    };\r\n  },\r\n  methods: {\r\n    async handleFileUpload(file) {\r\n      // Reset status sebelum upload baru\r\n      this.isProcessing = true;\r\n      this.isLongProcessing = false;\r\n      this.isDelayed = false;\r\n      this.errorMessage = \"\";\r\n      this.transcription = \"\";\r\n      this.summary = \"\";\r\n      this.finalSummary = \"\";\r\n      this.requestId = null;\r\n      this.elapsedTime = 0;\r\n      this.retryCount = 0;\r\n      this.processingMessage = \"Mengunggah file...\";\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      try {\r\n        const response = await api.post(\"/summarize/\", formData, {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        });\r\n\r\n        if (response.data.error) {\r\n          this.errorMessage = response.data.error;\r\n          this.isProcessing = false;\r\n        } else {\r\n          this.requestId = response.data.task_id;\r\n          this.processingMessage = \"File diunggah! Menunggu pemrosesan...\";\r\n          this.pollBackendStatus();\r\n        }\r\n      } catch (error) {\r\n        this.errorMessage = \"⚠️ Server sedang sibuk. Mohon tunggu...\";\r\n        this.isProcessing = false;\r\n      }\r\n    },\r\n\r\n    async pollBackendStatus() {\r\n      if (!this.requestId) return;\r\n\r\n      this.pollingInterval = setInterval(async () => {\r\n        try {\r\n          const statusResponse = await api.get(`/summarize/status/${this.requestId}`);\r\n\r\n          if (statusResponse.data.status === \"completed\") {\r\n            this.transcription = statusResponse.data.transcription;\r\n            this.summary = statusResponse.data.summary;\r\n            this.finalSummary = statusResponse.data.final_summary;\r\n            this.isProcessing = false;\r\n            clearInterval(this.pollingInterval);\r\n          } else if (statusResponse.data.status === \"failed\") {\r\n            this.isProcessing = false;\r\n            this.errorMessage = \"❌ Terjadi kesalahan dalam pemrosesan.\";\r\n            clearInterval(this.pollingInterval);\r\n          } else {\r\n            // Jika API memberikan respons \"Too Many Requests (429)\", perpanjang waktu polling\r\n            if (statusResponse.status === 429) {\r\n              this.retryCount++;\r\n              this.isDelayed = true;\r\n              this.processingMessage = `⚠️ Server sibuk, percobaan ke-${this.retryCount}. Menunggu...`;\r\n            } else {\r\n              this.processingMessage = statusResponse.data.message || \"Memproses...\";\r\n            }\r\n\r\n            this.elapsedTime += 5;\r\n            if (this.elapsedTime >= 60) {\r\n              this.isLongProcessing = true;\r\n            }\r\n            if (this.elapsedTime >= this.maxWaitTime) {\r\n              this.isProcessing = false;\r\n              this.errorMessage = \"❌ Waktu tunggu habis. Coba unggah ulang file.\";\r\n              clearInterval(this.pollingInterval);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"❌ Error checking status:\", error);\r\n        }\r\n      }, 5000);\r\n    },\r\n\r\n    cancelProcessing() {\r\n      if (this.pollingInterval) {\r\n        clearInterval(this.pollingInterval);\r\n        this.pollingInterval = null;\r\n      }\r\n      this.isProcessing = false;\r\n      this.errorMessage = \"⚠️ Pemrosesan dibatalkan.\";\r\n      this.requestId = null;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.processing-message {\r\n  color: #ff9800;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n\r\n.warning-message {\r\n  color: #d17b00;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n\r\n.delayed-message {\r\n  color: #007bff;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n\r\n.error-message {\r\n  color: red;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n\r\n.cancel-button {\r\n  background-color: red;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  margin-top: 10px;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
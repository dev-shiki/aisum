{"ast":null,"code":"import api from \"../api/axios\";\nimport UploadBox from \"../components/UploadBox.vue\";\nimport SummaryDisplay from \"../components/SummaryDisplay.vue\";\nimport LoadingSpinner from \"../components/LoadingSpinner.vue\";\nexport default {\n  components: {\n    UploadBox,\n    SummaryDisplay,\n    LoadingSpinner\n  },\n  data() {\n    return {\n      isProcessing: false,\n      isLongProcessing: false,\n      // Status jika pemrosesan lama (>1 menit)\n      errorMessage: \"\",\n      transcription: \"\",\n      summary: \"\",\n      finalSummary: \"\",\n      requestId: null,\n      pollingInterval: null,\n      // Menyimpan interval polling agar bisa dihentikan\n      elapsedTime: 0 // Waktu polling berjalan\n    };\n  },\n  methods: {\n    async handleFileUpload(file) {\n      this.isProcessing = true;\n      this.isLongProcessing = false;\n      this.errorMessage = \"\";\n      this.transcription = \"\";\n      this.summary = \"\";\n      this.finalSummary = \"\";\n      this.requestId = null;\n      this.elapsedTime = 0;\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      try {\n        const response = await api.post(\"/api/summarize/\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        console.log(\"üì° Response dari Backend:\", response.data);\n        if (response.data.error) {\n          this.errorMessage = response.data.error;\n          this.isProcessing = false;\n        } else {\n          this.requestId = response.data.task_id;\n          console.log(\"üÜî Task ID:\", this.requestId);\n          this.pollBackendStatus();\n        }\n      } catch (error) {\n        console.error(\"‚ùå Error uploading file:\", error);\n        this.errorMessage = \"‚ö†Ô∏è Server sedang sibuk. Mohon tunggu...\";\n        this.isProcessing = false;\n      }\n    },\n    async pollBackendStatus() {\n      console.log(\"üîÑ Memulai polling status...\");\n      this.pollingInterval = setInterval(async () => {\n        try {\n          if (!this.requestId) {\n            console.warn(\"‚ö†Ô∏è requestId tidak ditemukan, polling dihentikan.\");\n            clearInterval(this.pollingInterval);\n            return;\n          }\n          const statusResponse = await api.get(`/api/summarize/status/${this.requestId}`);\n          console.log(\"üì° Polling Response:\", statusResponse.data);\n          if (statusResponse.data.status === \"completed\") {\n            console.log(\"‚úÖ Pemrosesan selesai! Menampilkan hasil...\");\n            this.transcription = statusResponse.data.transcription;\n            this.summary = statusResponse.data.summary;\n            this.finalSummary = statusResponse.data.final_summary;\n            this.isProcessing = false;\n            clearInterval(this.pollingInterval);\n          } else if (statusResponse.data.status === \"failed\") {\n            console.error(\"‚ùå Pemrosesan gagal:\", statusResponse.data.error);\n            this.isProcessing = false;\n            this.errorMessage = \"‚ùå Terjadi kesalahan dalam pemrosesan.\";\n            clearInterval(this.pollingInterval);\n          } else {\n            // Jika status masih \"processing\", lanjutkan polling\n            this.elapsedTime += 5;\n            if (this.elapsedTime >= 60) {\n              this.isLongProcessing = true; // Tampilkan peringatan jika lebih dari 1 menit\n            }\n          }\n        } catch (error) {\n          console.error(\"‚ùå Error checking status:\", error);\n        }\n      }, 5000); // Polling setiap 5 detik\n    }\n  }\n};","map":{"version":3,"names":["api","UploadBox","SummaryDisplay","LoadingSpinner","components","data","isProcessing","isLongProcessing","errorMessage","transcription","summary","finalSummary","requestId","pollingInterval","elapsedTime","methods","handleFileUpload","file","formData","FormData","append","response","post","headers","console","log","error","task_id","pollBackendStatus","setInterval","warn","clearInterval","statusResponse","get","status","final_summary"],"sources":["D:\\app\\meeting-summarizer\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <!-- Upload File -->\r\n      <UploadBox @file-selected=\"handleFileUpload\" />\r\n  \r\n      <!-- Animasi Loading & Pesan Status -->\r\n      <LoadingSpinner v-if=\"isProcessing\" />\r\n      <p v-if=\"isProcessing\" class=\"processing-message\">‚è≥ Pemrosesan sedang berjalan...</p>\r\n      <p v-if=\"isLongProcessing\" class=\"warning-message\">‚ö†Ô∏è Masih dalam antrian... Mohon tunggu.</p>\r\n      <p v-if=\"errorMessage\" class=\"error-message\">‚ùå {{ errorMessage }}</p>\r\n  \r\n      <!-- Output Ringkasan -->\r\n      <SummaryDisplay\r\n        v-if=\"summary && !isProcessing\"\r\n        :transcription=\"transcription\"\r\n        :summary=\"summary\"\r\n        :finalSummary=\"finalSummary\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import api from \"../api/axios\";\r\n  import UploadBox from \"../components/UploadBox.vue\";\r\n  import SummaryDisplay from \"../components/SummaryDisplay.vue\";\r\n  import LoadingSpinner from \"../components/LoadingSpinner.vue\";\r\n  \r\n  export default {\r\n    components: {\r\n      UploadBox,\r\n      SummaryDisplay,\r\n      LoadingSpinner,\r\n    },\r\n    data() {\r\n      return {\r\n        isProcessing: false,\r\n        isLongProcessing: false, // Status jika pemrosesan lama (>1 menit)\r\n        errorMessage: \"\",\r\n        transcription: \"\",\r\n        summary: \"\",\r\n        finalSummary: \"\",\r\n        requestId: null,\r\n        pollingInterval: null, // Menyimpan interval polling agar bisa dihentikan\r\n        elapsedTime: 0, // Waktu polling berjalan\r\n      };\r\n    },\r\n    methods: {\r\n      async handleFileUpload(file) {\r\n        this.isProcessing = true;\r\n        this.isLongProcessing = false;\r\n        this.errorMessage = \"\";\r\n        this.transcription = \"\";\r\n        this.summary = \"\";\r\n        this.finalSummary = \"\";\r\n        this.requestId = null;\r\n        this.elapsedTime = 0;\r\n  \r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n  \r\n        try {\r\n          const response = await api.post(\"/api/summarize/\", formData, {\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          });\r\n  \r\n          console.log(\"üì° Response dari Backend:\", response.data);\r\n  \r\n          if (response.data.error) {\r\n            this.errorMessage = response.data.error;\r\n            this.isProcessing = false;\r\n          } else {\r\n            this.requestId = response.data.task_id;\r\n            console.log(\"üÜî Task ID:\", this.requestId);\r\n            this.pollBackendStatus();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"‚ùå Error uploading file:\", error);\r\n          this.errorMessage = \"‚ö†Ô∏è Server sedang sibuk. Mohon tunggu...\";\r\n          this.isProcessing = false;\r\n        }\r\n      },\r\n  \r\n      async pollBackendStatus() {\r\n        console.log(\"üîÑ Memulai polling status...\");\r\n        this.pollingInterval = setInterval(async () => {\r\n          try {\r\n            if (!this.requestId) {\r\n              console.warn(\"‚ö†Ô∏è requestId tidak ditemukan, polling dihentikan.\");\r\n              clearInterval(this.pollingInterval);\r\n              return;\r\n            }\r\n  \r\n            const statusResponse = await api.get(`/api/summarize/status/${this.requestId}`);\r\n            console.log(\"üì° Polling Response:\", statusResponse.data);\r\n  \r\n            if (statusResponse.data.status === \"completed\") {\r\n              console.log(\"‚úÖ Pemrosesan selesai! Menampilkan hasil...\");\r\n              this.transcription = statusResponse.data.transcription;\r\n              this.summary = statusResponse.data.summary;\r\n              this.finalSummary = statusResponse.data.final_summary;\r\n  \r\n              this.isProcessing = false;\r\n              clearInterval(this.pollingInterval);\r\n            } else if (statusResponse.data.status === \"failed\") {\r\n              console.error(\"‚ùå Pemrosesan gagal:\", statusResponse.data.error);\r\n              this.isProcessing = false;\r\n              this.errorMessage = \"‚ùå Terjadi kesalahan dalam pemrosesan.\";\r\n              clearInterval(this.pollingInterval);\r\n            } else {\r\n              // Jika status masih \"processing\", lanjutkan polling\r\n              this.elapsedTime += 5;\r\n              if (this.elapsedTime >= 60) {\r\n                this.isLongProcessing = true; // Tampilkan peringatan jika lebih dari 1 menit\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error(\"‚ùå Error checking status:\", error);\r\n          }\r\n        }, 5000); // Polling setiap 5 detik\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .container {\r\n    text-align: center;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .processing-message {\r\n    color: #ff9800;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .warning-message {\r\n    color: #d17b00;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .error-message {\r\n    color: red;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
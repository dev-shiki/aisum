{"ast":null,"code":"export default {\n  data() {\n    return {\n      file: null,\n      isUploading: false,\n      uploadStatus: null,\n      retryCount: 0 // Menghitung jumlah percobaan ulang\n    };\n  },\n  methods: {\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      // Periksa apakah file memiliki tipe \"audio/mp3\" atau \"audio/mpeg\"\n      if (file && (file.type === \"audio/mp3\" || file.type === \"audio/mpeg\")) {\n        this.file = file;\n        this.uploadFile();\n      } else {\n        alert(\"Hanya file MP3 yang didukung.\");\n      }\n    },\n    async uploadFile() {\n      const formData = new FormData();\n      formData.append(\"file\", this.file);\n      this.isUploading = true;\n      this.uploadStatus = null;\n      this.retryCount = 0; // Reset retry count\n\n      try {\n        // Kirim file ke backend untuk diproses\n        const response = await this.$axios.post(\"/summarize/\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n\n        // Memeriksa status berdasarkan task_id\n        this.checkStatus(response.data.task_id);\n      } catch (error) {\n        this.isUploading = false;\n        console.error(\"Upload failed:\", error);\n        this.uploadStatus = {\n          status: \"failed\",\n          message: \"Terjadi kesalahan saat mengunggah file.\",\n          error: error.message\n        };\n      }\n    },\n    async checkStatus(taskId) {\n      const interval = setInterval(async () => {\n        try {\n          const statusResponse = await this.$axios.get(`/summarize/status/${taskId}`);\n          const status = statusResponse.data;\n          if (status.status === \"completed\") {\n            clearInterval(interval);\n            this.isUploading = false;\n            this.uploadStatus = {\n              status: \"completed\",\n              message: \"Ringkasan selesai!\",\n              summary: status.summary || \"Ringkasan tidak ditemukan.\"\n            };\n          } else if (status.status === \"failed\") {\n            clearInterval(interval);\n            this.isUploading = false;\n            this.uploadStatus = {\n              status: \"failed\",\n              message: \"Proses gagal, coba lagi nanti.\",\n              error: status.error || \"Unknown error\"\n            };\n          } else {\n            this.uploadStatus = {\n              status: status.status,\n              message: status.message\n            };\n          }\n        } catch (error) {\n          clearInterval(interval);\n          this.isUploading = false;\n          console.error(\"Error fetching status:\", error);\n          this.uploadStatus = {\n            status: \"failed\",\n            message: \"Terjadi kesalahan saat memeriksa status.\",\n            error: error.message\n          };\n        }\n      }, 3000); // Mengecek status setiap 3 detik\n    }\n  }\n};","map":{"version":3,"names":["data","file","isUploading","uploadStatus","retryCount","methods","handleFileUpload","event","target","files","type","uploadFile","alert","formData","FormData","append","response","$axios","post","headers","checkStatus","task_id","error","console","status","message","taskId","interval","setInterval","statusResponse","get","clearInterval","summary"],"sources":["D:\\app\\meeting-summarizer\\src\\components\\FileUpload.vue"],"sourcesContent":["<template>\r\n    <div class=\"upload-container\">\r\n      <h2>Upload File MP3 untuk Ringkasan</h2>\r\n      <input type=\"file\" accept=\".mp3\" @change=\"handleFileUpload\" />\r\n  \r\n      <!-- Loading Animation -->\r\n      <div v-if=\"isUploading\" class=\"loading-container\">\r\n        <img src=\"@/assets/loading-animation.gif\" alt=\"Loading...\" />\r\n        <p>Proses sedang berjalan...</p>\r\n      </div>\r\n  \r\n      <!-- Menampilkan Status Proses -->\r\n      <div v-if=\"uploadStatus\">\r\n        <p>{{ uploadStatus.message }}</p>\r\n        <div v-if=\"uploadStatus.status === 'completed'\">\r\n          <h3>Ringkasan:</h3>\r\n          <p>{{ uploadStatus.summary }}</p>\r\n        </div>\r\n        <div v-if=\"uploadStatus.status === 'failed'\">\r\n          <p style=\"color: red;\">Proses gagal: {{ uploadStatus.error }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        file: null,\r\n        isUploading: false,\r\n        uploadStatus: null,\r\n        retryCount: 0, // Menghitung jumlah percobaan ulang\r\n      };\r\n    },\r\n    methods: {\r\n        async handleFileUpload(event) {\r\n            const file = event.target.files[0];\r\n            // Periksa apakah file memiliki tipe \"audio/mp3\" atau \"audio/mpeg\"\r\n            if (file && (file.type === \"audio/mp3\" || file.type === \"audio/mpeg\")) {\r\n            this.file = file;\r\n            this.uploadFile();\r\n            } else {\r\n            alert(\"Hanya file MP3 yang didukung.\");\r\n            }\r\n        },\r\n  \r\n        async uploadFile() {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", this.file);\r\n    \r\n            this.isUploading = true;\r\n            this.uploadStatus = null;\r\n            this.retryCount = 0; // Reset retry count\r\n  \r\n        try {\r\n          // Kirim file ke backend untuk diproses\r\n          const response = await this.$axios.post(\"/summarize/\", formData, {\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          });\r\n          \r\n          // Memeriksa status berdasarkan task_id\r\n          this.checkStatus(response.data.task_id);\r\n        } catch (error) {\r\n          this.isUploading = false;\r\n          console.error(\"Upload failed:\", error);\r\n          this.uploadStatus = {\r\n            status: \"failed\",\r\n            message: \"Terjadi kesalahan saat mengunggah file.\",\r\n            error: error.message,\r\n          };\r\n        }\r\n      },\r\n  \r\n      async checkStatus(taskId) {\r\n            const interval = setInterval(async () => {\r\n            try {\r\n                const statusResponse = await this.$axios.get(`/summarize/status/${taskId}`);\r\n                const status = statusResponse.data;\r\n\r\n                if (status.status === \"completed\") {\r\n                clearInterval(interval);\r\n                this.isUploading = false;\r\n                this.uploadStatus = {\r\n                    status: \"completed\",\r\n                    message: \"Ringkasan selesai!\",\r\n                    summary: status.summary || \"Ringkasan tidak ditemukan.\",\r\n                };\r\n                } else if (status.status === \"failed\") {\r\n                clearInterval(interval);\r\n                this.isUploading = false;\r\n                this.uploadStatus = {\r\n                    status: \"failed\",\r\n                    message: \"Proses gagal, coba lagi nanti.\",\r\n                    error: status.error || \"Unknown error\",\r\n                };\r\n                } else {\r\n                this.uploadStatus = { status: status.status, message: status.message };\r\n                }\r\n            } catch (error) {\r\n                clearInterval(interval);\r\n                this.isUploading = false;\r\n                console.error(\"Error fetching status:\", error);\r\n                this.uploadStatus = {\r\n                status: \"failed\",\r\n                message: \"Terjadi kesalahan saat memeriksa status.\",\r\n                error: error.message,\r\n                };\r\n            }\r\n            }, 3000); // Mengecek status setiap 3 detik\r\n        },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .upload-container {\r\n    text-align: center;\r\n    margin: 50px auto;\r\n    max-width: 600px;\r\n    padding: 20px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  input[type=\"file\"] {\r\n    padding: 10px;\r\n    margin: 20px 0;\r\n  }\r\n  \r\n  .loading-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n  }\r\n  \r\n  h2 {\r\n    color: #333;\r\n  }\r\n  \r\n  p {\r\n    color: #555;\r\n  }\r\n  \r\n  h3 {\r\n    font-size: 1.2rem;\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  img {\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AA0BE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAE,CAAC,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,gBAAgBA,CAACC,KAAK,EAAE;MAC1B,MAAMN,IAAG,GAAIM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC;MACA,IAAIR,IAAG,KAAMA,IAAI,CAACS,IAAG,KAAM,WAAU,IAAKT,IAAI,CAACS,IAAG,KAAM,YAAY,CAAC,EAAE;QACvE,IAAI,CAACT,IAAG,GAAIA,IAAI;QAChB,IAAI,CAACU,UAAU,CAAC,CAAC;MACjB,OAAO;QACPC,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACJ,CAAC;IAED,MAAMD,UAAUA,CAAA,EAAG;MACf,MAAME,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACd,IAAI,CAAC;MAElC,IAAI,CAACC,WAAU,GAAI,IAAI;MACvB,IAAI,CAACC,YAAW,GAAI,IAAI;MACxB,IAAI,CAACC,UAAS,GAAI,CAAC,EAAE;;MAEzB,IAAI;QACF;QACA,MAAMY,QAAO,GAAI,MAAM,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,aAAa,EAAEL,QAAQ,EAAE;UAC/DM,OAAO,EAAE;YAAE,cAAc,EAAE;UAAsB;QACnD,CAAC,CAAC;;QAEF;QACA,IAAI,CAACC,WAAW,CAACJ,QAAQ,CAAChB,IAAI,CAACqB,OAAO,CAAC;MACzC,EAAE,OAAOC,KAAK,EAAE;QACd,IAAI,CAACpB,WAAU,GAAI,KAAK;QACxBqB,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtC,IAAI,CAACnB,YAAW,GAAI;UAClBqB,MAAM,EAAE,QAAQ;UAChBC,OAAO,EAAE,yCAAyC;UAClDH,KAAK,EAAEA,KAAK,CAACG;QACf,CAAC;MACH;IACF,CAAC;IAED,MAAML,WAAWA,CAACM,MAAM,EAAE;MACpB,MAAMC,QAAO,GAAIC,WAAW,CAAC,YAAY;QACzC,IAAI;UACA,MAAMC,cAAa,GAAI,MAAM,IAAI,CAACZ,MAAM,CAACa,GAAG,CAAC,qBAAqBJ,MAAM,EAAE,CAAC;UAC3E,MAAMF,MAAK,GAAIK,cAAc,CAAC7B,IAAI;UAElC,IAAIwB,MAAM,CAACA,MAAK,KAAM,WAAW,EAAE;YACnCO,aAAa,CAACJ,QAAQ,CAAC;YACvB,IAAI,CAACzB,WAAU,GAAI,KAAK;YACxB,IAAI,CAACC,YAAW,GAAI;cAChBqB,MAAM,EAAE,WAAW;cACnBC,OAAO,EAAE,oBAAoB;cAC7BO,OAAO,EAAER,MAAM,CAACQ,OAAM,IAAK;YAC/B,CAAC;UACD,OAAO,IAAIR,MAAM,CAACA,MAAK,KAAM,QAAQ,EAAE;YACvCO,aAAa,CAACJ,QAAQ,CAAC;YACvB,IAAI,CAACzB,WAAU,GAAI,KAAK;YACxB,IAAI,CAACC,YAAW,GAAI;cAChBqB,MAAM,EAAE,QAAQ;cAChBC,OAAO,EAAE,gCAAgC;cACzCH,KAAK,EAAEE,MAAM,CAACF,KAAI,IAAK;YAC3B,CAAC;UACD,OAAO;YACP,IAAI,CAACnB,YAAW,GAAI;cAAEqB,MAAM,EAAEA,MAAM,CAACA,MAAM;cAAEC,OAAO,EAAED,MAAM,CAACC;YAAQ,CAAC;UACtE;QACJ,EAAE,OAAOH,KAAK,EAAE;UACZS,aAAa,CAACJ,QAAQ,CAAC;UACvB,IAAI,CAACzB,WAAU,GAAI,KAAK;UACxBqB,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;UAC9C,IAAI,CAACnB,YAAW,GAAI;YACpBqB,MAAM,EAAE,QAAQ;YAChBC,OAAO,EAAE,0CAA0C;YACnDH,KAAK,EAAEA,KAAK,CAACG;UACb,CAAC;QACL;MACA,CAAC,EAAE,IAAI,CAAC,EAAE;IACd;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}